#include <WiFi.h>
#include <ThingSpeak.h>

// Replace with your network credentials
const char *ssid = "YOUR_SSID";
const char *password = "YOUR_PASSWORD";

// ThingSpeak settings
unsigned long myChannelNumber = YOUR_CHANNEL_NUMBER;
const char *myWriteAPIKey = "YOUR_WRITE_API_KEY";

WiFiClient client;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  
  Serial.println("Connected to WiFi");
  ThingSpeak.begin(client);
}

void loop() {
  // Replace with your actual sensor readings
  float co2Level = readCO2Sensor(); // Function to read CO2 levels
  float nh3Level = readNH3Sensor(); // Function to read NH3 levels
  float coLevel = readCOSensor(); // Function to read CO levels
  
  // Print the readings to Serial Monitor
  Serial.print("CO2 Level: ");
  Serial.println(co2Level);
  Serial.print("NH3 Level: ");
  Serial.println(nh3Level);
  Serial.print("CO Level: ");
  Serial.println(coLevel);

  // Write to ThingSpeak
  ThingSpeak.setField(1, co2Level);
  ThingSpeak.setField(2, nh3Level);
  ThingSpeak.setField(3, coLevel);

  int responseCode = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  
  if (responseCode == 200) {
    Serial.println("Data sent to ThingSpeak successfully.");
  } else {
    Serial.print("Failed to send data. Response code: ");
    Serial.println(responseCode);
  }
  
  // Wait 15 seconds before the next update
  delay(15000);
}

// Placeholder functions for sensor readings
float readCO2Sensor() {
  // Add your sensor reading logic here
  return random(400, 1000); // Simulated value
}

float readNH3Sensor() {
  // Add your sensor reading logic here
  return random(0, 100); // Simulated value
}

float readCOSensor() {
  // Add your sensor reading logic here
  return random(0, 500); // Simulated value
}
